<% include header %>
  <div style="margin-top: 3% !important;"></div>
  <div class="ui grid">
    <div class="ui container">
      <div id="infoTabs" style="overflow-x: hidden; overflow-y: auto; height:500px;">
        <div id="externalInfo"></div>
        <ul id="viewList" class="nav nav-tabs" style="display: none">
          <li class="active"><a class="nav-link active" data-toggle="tab" id="showExternalInfo" href="#documentation">Documentation</a></li>
          <li><a class="nav-link" data-toggle="tab" id="sourceCodeTab" href="#sourceCode">Source</a></li>
          <li><a class="nav-link" data-toggle="tab" id="graphTab" href="#showGraph">Graphical depiction</a></li>
        </ul>
        <div class="tab-content">
          <div class="tab-pane active" id="documentation" role="tabpanel">
            <div id="infoDetails">
              <h2 id="conceptHead" style="display: none; margin-top:9px"> Details: </h2>
              <div id="detailTable" style="padding-bottom:20px"></div>
              <div id="domainTable" style="display: none; padding-bottom:20px"></div>
              <div id="rangeTable" style="display: none; padding-bottom:20px"></div>
              <div id="instancesTable" style="display: none"></div>
              <h4 id="instanceHead" style="display: none; margin-top:9px"></h4>
              <div id="instanceDetailsTable" style="display: none"></div>
            </div>
          </div>
          <div class="tab-pane" class="tabContent" id="sourceCode" role="tabpanel">
            <div id="yasqe" style="overflow: hidden"></div>
          </div>
          <div class="tab-pane" class="tabContent" id="showGraph" role="tabpanel">
            <div id='graph'></div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <% include footer %>
    <!-- End of expressJS coding-->

    <!-- Start of javascript coding-->
    <script>
      // get all the data from route.tree.js
      var RDFSData = <%- JSON.stringify(data) %>;
      var SKOSData = <%- JSON.stringify(SKOSData) %>;
      var mixRDFConcepts = <%- JSON.stringify(allRDFObjects) %>;
      var mixSKOSConcepts = <%- JSON.stringify(allSKOSObjects) %>;
      var RDFObjPlusURI = <%- JSON.stringify(RDFObjectsPlusURI) %>;
      var SKOSObjPlusURI = <%- JSON.stringify(SKOSObjectsPlusURI) %>;
      // store the selected concept
      var currentSelectedConcept = <%- JSON.stringify(referenceItem) %>;
      console.log(currentSelectedConcept);
      // store current elements in the tree, it has RDFS concepts initially
      var currentTreeData = RDFSData;
      // store which file is selected from the dropdown menuSize
      var currentSelectedFile = "ALL Files";
      // store SKOS URI of the selected node
      var currentSelectedSKOSURI = "";
      // change page title
      $(document).prop('title', currentSelectedConcept);

      // get getExternalsConcepts for either SKOS or RFS(S)
      function getExternalsConcepts() {
        var externalConcepts = [];
        if ($('#SKOSViewCheckBox').is(':checked')) {
          var internals = [];
          mixSKOSConcepts.forEach(function(item) {
            for (var i = 0; i < SKOSData.length; i++) {
              if (item === SKOSData[i].child || item === SKOSData[i].parent) {
                internals.push(item);
              }
            }
          });
          externalConcepts = $(mixSKOSConcepts).not(internals).get();
        }
        if ($('#RDFSViewCheckBox').is(':checked')) {
          var internals = [];
          mixRDFConcepts.forEach(function(item) {
            for (var i = 0; i < RDFSData.length; i++) {
              if (item === RDFSData[i].concept) {
                internals.push(item);
              }
            }
          });
          externalConcepts = $(mixRDFConcepts).not(internals).get();
        }
        return externalConcepts;
      }

      // make unique concept in  tree
      function uniqueArray(array) {
        var a = array.concat();
        for (var i = 0; i < a.length; i++) {
          for (var j = i + 1; j < a.length; j++) {
            if (a[i].text === a[j].text) {
              a.splice(j--, 1);
            }
          }
        }
        return a;
      }

      // show info. for external Concepts and thier instaces
      function showExternalInfo(str) {
        var ExteralURI = getExternalURI(str);

        // check if URI for external concept is exist
        if (ExteralURI) {
          //scrollTop if class clicked from instanceDetailsTable
          $("#infoTabs").animate({
            scrollTop: 0
          }, "fast");
          $("#instanceHead").hide();
          $("#instanceDetailsTable").hide();
          $("#instancesTable").hide();
          var externalURITable = '<div class="ui attached error message">' +
            '<div class="header"> This concept is external </div></div>';
          // check if it URL ends with "/"
          if (ExteralURI[ExteralURI.length - 1] === ('/')) {
            var link = '<a href=' + ExteralURI.slice(0, -1) + '>' + ExteralURI.slice(0, -1) + '</a>';
          } else {
            var link = '<a href=' + ExteralURI + '>' + ExteralURI + '</a>';
          }
          //show info. about the external concept
          externalURITable += '<div class="ui bottom attached fluid segment"> For more details, please click the following link: <br/><br/> ' + link;
          externalURITable += '</div>';
          $('#infoTabs').show();
          $('a[href="#documentation"]').click();
          $('#sourceCodeTab').hide();
          $('#graphTab').hide();
          $('#infoDetails').show();
          $("#domainTable").hide();
          $("#rangeTable").hide();
          $("#instancesTable").hide();
          $("#instanceHead").hide();
          $("#instanceDetailsTable").hide();
          $("#conceptHead").show();
          if (ExteralURI[ExteralURI.length - 1] === ('/')) {
            var str = ExteralURI.slice(0, -1);
            $("#conceptHead").html('<p >  Details for : <code>' + trimHash(trimSlash(str)) + '</code></p>');
          } else {
            $("#conceptHead").html('<p >  Details for : <code>' + trimHash(replaceWithRDFType(trimSlash(ExteralURI))) + '</code></p>');
          }
          $('#detailTable').html(externalURITable);
          $('#detailTable').transition('shake')
          var endpoint = "./fuseki/dataset/sparql?query=";
          var querystring = 'SELECT  ?s WHERE { ?s  a <' + encodeURIComponent(ExteralURI) + '> }';
          var method = "POST";
          //  async = true.
          var async = true;
          var request = new XMLHttpRequest();
          request.onload = function() {
            var status = request.status; // HTTP response status, e.g., 200 for "200 OK"
            var data = JSON.parse(request.responseText); // Returned data, e.g., an HTML document.
            var instances = data.results.bindings;
            if (instances[0] != null) {
              var instancesTable = '<table class="ui pink table" >' +
                '<colgroup> <col class="col-md-4"> </colgroup>' +
                '<tr>' +
                '<th>Instances</th>' +
                '</tr>';
              for (var i = 0; i < instances.length; i++) {
                var instanceURI = instances[i]["s"].value;
                var key1 = trimHash(trimSlash(instanceURI));
                key1 = '<a href="#" onmousedown="showInstanceDetails(&quot;' + instanceURI + '&quot;); return false; ">' + key1 + '</a>';
                instancesTable += '<tr>    <td>' + key1 + '</td>  </tr>';
              }
              instancesTable += '</table> ';
              $("#instancesTable").show();
              $("#instancesTable").html(instancesTable);
            } else {
              $("#instancesTable").hide();
              $("#instanceHead").hide();
              $("#instanceDetailsTable").hide();
            }
          }
          request.open(method, endpoint + querystring, true);
          request.setRequestHeader("Content-Type", 'application/x-www-form-urlencoded');
          // send the request to the server.
          request.send();
        } else {
          infoTabs
          $('#infoTabs').hide();
          $('#infoDetails').hide();
          $("#externalInfo").show();
          $("#externalInfo").html('<p > Concept is External still has no URI</p>');
        }
      }

      // Get the word after slash char of a string
      function trimSlash(str) {
        if (str.includes("/")) {
          var n = str.split("/").pop(-1);;
          return n;
        } else {
          return str;
        }
      }

      // Get the word after hash char of a string
      function trimHash(str) {
        if (str.includes("#")) {
          var n = str.split('#');;
          var p = n[n.length - 1];
          return p;
        } else {
          return str;
        }
      }

      // Customization of the RDF type to show as in standards
      function replaceWithRDFType(str) {
        if (str.includes("22-rdf-syntax-ns")) {
          return "rdf:" + trimHash(str);
        } else if (str.includes('rdf-schema'))
          return "rdfs:" + trimHash(str);
        else if (str.includes('owl'))
          return "owl:" + trimHash(str);
        else if (str.includes('core#Concept') || str.includes('narrower') || str.includes('broader'))
          return "skos:" + trimHash(str);
        else
          return str;
      }

      //check if concept is in our ontology or external
      function isConceptInside(str) {
        if ($('#SKOSViewCheckBox').is(':checked')) {
          if (SKOSData.find(x => x.child === str) || SKOSData.find(x => x.parent === str)) {
            return true;
          }
        } else if ($('#RDFSViewCheckBox').is(':checked')) {
          if (RDFSData.find(x => x.concept === str)) {
            return true;
          }
        }
        return false;
      }

      // check if the concept is external
      function isConceptExternal(str) {
        var externalConcepts = getExternalsConcepts();
        for (var i = 0; i < externalConcepts.length; i++) {
          if (str === externalConcepts[i]) {
            return true;
          }
        }
        return false;
      }

      // get externalURI
      function getExternalURI(str) {
        var array = [];
        if ($('#SKOSViewCheckBox').is(':checked')) {
          array = SKOSObjPlusURI;
        } else if ($('#RDFSViewCheckBox').is(':checked')) {
          array = RDFObjPlusURI;
        }
        for (var i = 0; i < array.length; i++) {
          if (str === array[i].object)
            return array[i].URI;
        }
        return;
      }

      // show info. details of clicked instance
      function showInstanceDetails(instanceURI) {
        var endpoint = "./fuseki/dataset/sparql?query=";
        var querystring = 'SELECT  ?p ?o WHERE {  <' + encodeURIComponent(instanceURI) + '> ?p ?o }';
        var method = "POST";
        var async = true;
        var request = new XMLHttpRequest();
        request.onload = function() {
          var status = request.status; // HTTP response status, e.g., 200 for "200 OK"
          var data = JSON.parse(request.responseText); // Returned data, e.g., an HTML document.
          var instances = data.results.bindings;
          if (instances[0] != null) {
            var instancesDetailsTable = '<table class="ui blue celled table" >' +
              // '<colgroup> <col class="col-md-2"><col class="col-md-4"> </colgroup>' +
              '<thead><tr class="info">' +
              '<th>Predicate</th>' +
              '<th>Object</th>' +
              '</tr></thead>';
            for (var i = 0; i < instances.length; i++) {
              var key1 = instances[i]['p'].value;
              var key2 = instances[i]['o'].value;
              var key3 = instances[i]['o']['xml:lang'];
              var key4 = instances[i]['o']['type'];

              //check if object is uri end with "/"
              if (key2.includes("http://") && key1.includes("seeAlso")) {
                if (key2[key2.length - 1] === ('/'))
                  key2 = key2.slice(0, -1);
                key2 = '<a href=' + key2 + '>' + key2 + '</a>';
              }
              key1 = trimHash(replaceWithRDFType(trimSlash(instances[i]['p'].value)));
              key2 = trimHash(replaceWithRDFType(trimSlash(instances[i]['o'].value)));

              if (key1.includes("broader") || key1.includes("narrower")) {
                key2 = '<a href="#" onmousedown="getConceptinfo(&quot;' + key2URI + '&quot;,&quot;SKOS&quot;); return false; ">' + key2 + '</a>';
              }
              if (isConceptExternal(key2) && !key1.includes("label") && key4 === "uri") {
                key2 = '<a href="#" onmousedown="showExternalInfo(&quot;' + key2 + '&quot;); return false; ">' + key2 + '</a>';
              }
              if (isConceptInside(key2) && !key1.includes("label") && key4 === "uri") {
                key2 = '<a href="#" onmousedown="getConceptinfo(&quot;' + key2 + '&quot;); return false; ">' + key2 + '</a>';
              }
              if (key1.includes("label")) {
                if (key3)
                  key2 = key2 + '@' + key3;
              }
              instancesDetailsTable += '<tr><td>' + key1 + '</td>    <td>' + key2 + '</td>  </tr>';
            }
            instancesDetailsTable += '</table> ';
            $("#instanceHead").show();
            $("#instanceHead").html('<h3> Instance Details for :<code>' + trimHash(replaceWithRDFType(trimSlash(instanceURI))) + '</code></h3>');
            $("#instanceDetailsTable").show();
            $("#instanceDetailsTable").html(instancesDetailsTable);
            document.getElementById("instanceHead").scrollIntoView()

          } else {
            $("#instanceHead").hide();
            $("#instanceDetailsTable").hide();
          }
        }
        request.open(method, endpoint + querystring, true);
        request.setRequestHeader("Content-Type", 'application/x-www-form-urlencoded');
        //send the request to the server.
        request.send();
      }

      // To display instances of  the selected node
      function showInstances(item) {
        var conceptURI;
        var isURIExist = false;
        if (item) {
          for (var i = 0; i < RDFSData.length; i++) {
            if (item.toLowerCase() === RDFSData[i].concept.toLowerCase()) {
              conceptURI = RDFSData[i].URI;
              isURIExist = true;
              break;
            }
          }
          if (isURIExist) {
            var endpoint = "./fuseki/dataset/sparql?query=";
            var querystring = 'SELECT  ?s WHERE { ?s  a <' + encodeURIComponent(conceptURI) + '> }';
            var method = "POST";
            var async = true;
            var request = new XMLHttpRequest();
            request.onload = function() {
              var status = request.status; // HTTP response status, e.g., 200 for "200 OK"
              var data = JSON.parse(request.responseText); // Returned data, e.g., an HTML document.
              var instances = data.results.bindings;
              if (instances[0] != null) {
                var instancesTable = '<table class="ui red table" >' +
                  '<colgroup> <col class="col-md-4"> </colgroup>' +
                  '<tr>' +
                  '<th>Instances</th>' +
                  '</tr>';
                for (var i = 0; i < instances.length; i++) {
                  var instanceURI = instances[i]["s"].value;
                  var key1 = trimSlash(instances[i]["s"].value);
                  key1 = '<a href="#" onmousedown="showInstanceDetails(&quot;' + instanceURI + '&quot;); return false; ">' + key1 + '</a>';
                  instancesTable += '<tr>    <td>' + key1 + '</td>  </tr>';
                }
                instancesTable += '</table> ';
                $("#instancesTable").show();
                $("#instancesTable").html(instancesTable);
              } else {
                $("#instancesTable").html("");
                $("#instancesTable").hide();
                $("#instanceHead").hide();
                $("#instanceDetailsTable").hide();
              }
            }
            request.open(method, endpoint + querystring, true);
            request.setRequestHeader("Content-Type", 'application/x-www-form-urlencoded');
            //  the request is sent to the server.
            request.send();
          } else
            $("#instancesTable").html('<p>No node was selected !!!</p>');
        }
      }

      // To display Turtle source for the selected node
      function showTurtleSource(item, view, anotherQuery) {
        var conceptURI;
        var isURIExist = false;
        if (view == "SKOS") {
          conceptURI = item;
          isURIExist = true;
        } else {
          if (item) {
            for (var i = 0; i < RDFSData.length; i++) {
              if (item.toLowerCase() === RDFSData[i].concept.toLowerCase()) {
                conceptURI = RDFSData[i].URI;
                isURIExist = true;
                break;
              }
            }
          } else if (currentSelectedConcept) {
            for (var i = 0; i < RDFSData.length; i++) {
              if (currentSelectedConcept.toLowerCase() === RDFSData[i].concept.toLowerCase()) {
                conceptURI = RDFSData[i].URI;
                isURIExist = true;
                break;
              }
            }
          } else
            isURIExist = false;
        }
        if (isURIExist) {
          var endpoint = "./fuseki/dataset/sparql?query="
          if (!anotherQuery)
            var querystring = 'CONSTRUCT{<' + encodeURIComponent(conceptURI) + '> ?p ?o .}WHERE {<' + encodeURIComponent(conceptURI) + '> ?p ?o .}';
          else
            var querystring = 'CONSTRUCT{ ?s ?p <' + encodeURIComponent(conceptURI) + '> .}WHERE { ?s ?p <' + encodeURIComponent(conceptURI) + '> .}';
          $('div.yasqe').empty();
          $.ajax({
            type: 'GET',
            url: endpoint + querystring,
            headers: {
              Accept: 'application/x-www-form-urlencoded;charset=UTF-8'
            },
            success: function(data, textStatus, jqXHR) {
              $('#sourceCodeTab').show();
              $('div.yasqe').remove();
              var config = {
                createShareLink: false,
                readOnly: true,
                syntaxErrorCheck: false,
                lineNumbers: false
              };
              // use yasqe library to display turtle format
              var yasqe = YASQE(document.getElementById("yasqe"), config);
              $("div.CodeMirror-gutters").remove();
              $("div.yasqe_buttons").remove();
              yasqe.setValue(data);
              $("div.yasqe").transition('pulse');
            },
            error: function(e) {
              console.log(e);
            }
          });
        }
      }

      // call to showTurtleSource to display the turtle format
      // when checkbox is clicked
      $("#sourceCodeTab").on('click', function() {
        showTurtleSource(currentSelectedConcept);
      });

      // to query sparql endpoint return graph and queryResult
      function getConceptinfo(item, view, anotherQuery) {
        var str = "";
        var isURIExist = false;
        var conceptURI;
        currentSelectedConcept = item;

        if (view === "SKOS") {
          conceptURI = item;
          isURIExist = true;
        } else {
          for (var i = 0; i < RDFSData.length; i++) {
            if (item.toLowerCase() === RDFSData[i].concept.toLowerCase()) {
              conceptURI = RDFSData[i].URI;
              isURIExist = true;
              break;
            }
          }
        }
        if (view === "SKOS") {
          //scrollTop if class clicked from instanceDetailsTable
          $("#infoTabs").animate({
            scrollTop: 0
          }, "fast");
          $("#instanceHead").hide();
          $("#instanceDetailsTable").hide();
          $("#instancesTable").hide();
          // scroll to the clicked node from documentation and select the node
          const callback = element => element.innerHTML == trimHash(replaceWithRDFType(trimSlash(item)));
          const elements = Array.from(document.getElementsByTagName('a'));
          const result = elements.filter(callback);
          var $s = $('#treeContainer');
          //  get nodeid of string node.text
          var liTop = $s.find('[data-nodeid=' + parseInt(result["0"].firstChild.parentNode.offsetParent.dataset.nodeid) + ']').offset().top;
          var ulTop = $s.offset().top;
          // scroll to the selected node
          $s.scrollTop($s.scrollTop() + (liTop - ulTop));
          // select the node of the treeview
          $('#tree').treeview('selectNode', [parseInt(result["0"].firstChild.parentNode.offsetParent.dataset.nodeid), {
            silent: true
          }]);
        }
        if (isURIExist) {
          var endpoint = "./fuseki/dataset/sparql"
          if (!anotherQuery)
            var sparql = 'SELECT  ?p ?o WHERE {  <' + conceptURI + '> ?p ?o }'
          else
            var sparql = 'SELECT  ?o ?p WHERE { ?o ?p <' + conceptURI + '> }'
          d3sparql.query(endpoint, sparql, render)
        }
      }
      var justOneTimeExectuted = false;
      // Function to display data in tables on the page
      function render(json) {
        var objectOrSubject = "Object";
        var dataSPARQL = json.results.bindings;
        // check for spec case of skos concepts
        if (dataSPARQL.length === 0 && $('#SKOSViewCheckBox').is(':checked')) {
          getConceptinfo(currentSelectedSKOSURI, "SKOS", "queryAsObject");
          showTurtleSource(currentSelectedSKOSURI, "SKOS", "queryAsObject", false);
          justOneTimeExectuted = true;
        } else {
          if (justOneTimeExectuted)
            objectOrSubject = "Subject";
          if (justOneTimeExectuted && objectOrSubject === "Subject")
            justOneTimeExectuted = false;
          // needed local variables
          var conceptHasRange = "";
          var conceptHasDomain = "";
          var conceptLabel;
          var table = '<table class="ui green celled striped table" >' +
            '<colgroup> <col class="col-md-2"><col class="col-md-4"> </colgroup>' +
            '<tr class="positive">' +
            '<th>Predicate</th>' +
            '<th>' + objectOrSubject + '</th>' +
            '</tr>';
          var rangeTable = '<table class="ui yellow celled striped table" >' +
            '<colgroup> <col class="col-md-6"> </colgroup>' +
            '<tr class="warning">' +
            '<th>Values expected to be one of these types</th>' +
            '</tr>';
          var domainTable = '<table class="ui brown celled striped table" >' +
            '<colgroup> <col class="col-md-6"> </colgroup>' +
            '<tr class="negative">' +
            '<th>Used on these types</th>' +
            '</tr>';
          for (var i = 0; i < dataSPARQL.length; i++) {
            var key1 = trimHash(replaceWithRDFType(trimSlash(dataSPARQL[i]['p'].value)));
            var key2 = dataSPARQL[i]['o'].value;
            var key2URI = key2;

            //check if object is uri
            if (key2.includes("http://") && key1.includes("seeAlso")) {
              if (key2[key2.length - 1] === ('/'))
                key2 = key2.slice(0, -1);
              key2 = '<a href=' + key2 + '>' + key2 + '</a>';
            } else
              key2 = trimHash(replaceWithRDFType(trimSlash(key2)));

            var key3 = dataSPARQL[i]['o']['xml:lang'];
            var key4 = dataSPARQL[i]['o']['type'];
            if (key1.includes("domain")) {
              conceptHasDomain = key1;
              if (isConceptInside(key2) && key4 === "uri")
                key2 = '<a href="#" onmousedown="getConceptinfo(&quot;' + key2 + '&quot;); return false; ">' + key2 + '</a>';
              else if (isConceptExternal(key2) && key4 === "uri")
                key2 = '<a href="#" onmousedown="showExternalInfo(&quot;' + key2 + '&quot;); return false; ">' + key2 + '</a>';
              domainTable += '<tr>    <td>' + key2 + '</td>  </tr>';
            } else if (key1.includes("range")) {
              conceptHasRange = key1;
              if (isConceptInside(key2) && key4 === "uri")
                key2 = '<a href="#" onmousedown="getConceptinfo(&quot;' + key2 + '&quot;); return false; ">' + key2 + '</a>';
              else if (isConceptExternal(key2) && key4 === "uri")
                key2 = '<a href="#" onmousedown="showExternalInfo(&quot;' + key2 + '&quot;); return false; ">' + key2 + '</a>';
              rangeTable += '<tr>    <td>' + key2 + '</td>  </tr>';
            } else {
              if (key1.includes("broader") || key1.includes("narrower")) {
                key2 = '<a href="#" onmousedown="getConceptinfo(&quot;' + key2URI + '&quot;,&quot;SKOS&quot;); return false; ">' + key2 + '</a>';
              }
              if (isConceptExternal(key2) && !key1.includes("label") && key4 === "uri") {
                key2 = '<a href="#" onmousedown="showExternalInfo(&quot;' + key2 + '&quot;); return false; ">' + key2 + '</a>';
              }
              if (isConceptInside(key2) && !key1.includes("label") && key4 === "uri") {
                key2 = '<a href="#" onmousedown="getConceptinfo(&quot;' + key2 + '&quot;); return false; ">' + key2 + '</a>';
              }
              if (key1.includes("label")) {
                if (key3)
                  key2 = key2 + '@' + key3;
              }
              table += '<tr><td>' + key1 + '</td>    <td>' + key2 + '</td>  </tr>';
            }
          }
          //end of tables
          table += '</table> ';
          domainTable += '</table> ';
          rangeTable += '</table> ';
          $('#infoTabs').show();
          $("#infoTabs").animate({
            scrollTop: 0
          }, "fast");

          //display returned data on the Html tables
          $("#conceptHead").show();
          if (currentSelectedConcept.includes("http://")) { //check if it skosURI
            currentSelectedConcept = trimHash(trimSlash(currentSelectedConcept));
          }
          $("#conceptHead ").html('<p >  Details: <code>' + currentSelectedConcept + '</code></p>');
          $("#infoDetails").show();
          $('#viewList').show();
          // domainTable has some values to show
          if (!conceptHasDomain == "")
            $("#domainTable").show();
          else
            $("#domainTable").hide();
          // rangeTable has some values to show
          if (!conceptHasRange == "")
            $("#rangeTable").show();
          else {
            $("#rangeTable").hide();
          }
          $("#detailTable").html(table);
          $("#domainTable").html(domainTable);
          $("#rangeTable").html(rangeTable);
          $("#sourceCodeTab").show();
          // To render the graph id the graphTab if a concept node is selected
          showConceptGraph(json);

          // To render oncemore the graph id the graphTab is clicked
          $('#graphTab').on('click', function() {
            showConceptGraph(json);
          });
        }
      }


      // To show the graph of the selected concept
      function showConceptGraph(json) {
        // config. of the graph
        var config = {
          "radius": 30,
          "charge": -200,
          "distance": 20,
          "width": 800,
          "height": 400,
          "selector ": '#showGraph'
        };
        d3sparql.forcegraph(json, config);
        $('#graph').html('');
        $('#graphTab').show();
        $('div.d3sparql.forcegraph').appendTo($('#graph'));
      }
      // To display in TabView
      $(document).ready(function(e) {
        $(document).on('click', 'a[href="#"]', function(e) {
          e.preventDefault();
        });
        getConceptinfo(currentSelectedConcept);

      });
    </script>
    <!-- End of JavaScript coding-->
